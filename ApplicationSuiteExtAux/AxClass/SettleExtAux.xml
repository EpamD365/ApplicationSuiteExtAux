<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettleExtAux</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Settlement auxiliary class.
/// </summary>
public class SettleExtAux
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>UnsettleCustByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unsettle customer transactions by voucher.
    /// </summary>
    /// <param name = "_voucher">Voucher.</param>
    public static void UnsettleCustByVoucher(Voucher _voucher)
    {
        CustTrans findCustTrans;

        select firstonly * from findCustTrans
            where findCustTrans.Voucher == _voucher;

        if (findCustTrans.RecId)
        {
            AmountCur balanceAmount = findCustTrans.remainAmountCur();

            //if (balanceAmount == 0)
            {
                CustTable custTable = custTable::find(findCustTrans.AccountNum);
                CustSettlement custSettlement;

                select firstonly custSettlement
                    where custSettlement.TransCompany == findCustTrans.dataAreaId
                        && custSettlement.TransRecId == findCustTrans.RecId
                        && custSettlement.AccountNum == findCustTrans.AccountNum;

                SpecTransManager specTransManager = SpecTransManager::newRefTableId(custTable, tablenum(custSettlement), true);
                specTransManager.insert(custSettlement.DataAreaId, custSettlement.TableId, custSettlement.RecId, custSettlement.SettleAmountCur, findCustTrans.CurrencyCode);

                CustVendSettlement custVendSettlement;

                custVendSettlement = CustVendSettlement::findByModule(ModuleCustVend::Cust, custSettlement.RecId);

                custVendSettlement.markThisAndRelatedOffsets(specTransManager, findCustTrans.CurrencyCode);

                //custSettlement.CustVendSettlement::markOffsets(specTransManager, findCustTrans.CurrencyCode, true);

                if (CustTrans::reverseTransact(custTable, null, settleDatePrinc::DateOfPayment, custSettlement.TransDate))
                {
                    specTransManager.deleteAll();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UnsettleVendByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unsettle vendor transactions by voucher.
    /// </summary>
    /// <param name = "_voucher">Voucher.</param>
    public static void UnsettleVendByVoucher(Voucher _voucher)
    {
        VendTrans findVendTrans;

        select firstonly * from findVendTrans
            where findVendTrans.Voucher == _voucher;

        if (findVendTrans.RecId == 0)
        {
            return;
        }

        VendTable vendTable = VendTable::find(findVendTrans.AccountNum);
        //VendSettlement vendSettlement;

        //select firstonly vendSettlement
        //    where vendSettlement.TransCompany == findVendTrans.dataAreaId
        //        && vendSettlement.TransRecId == findVendTrans.RecId
        //        && vendSettlement.AccountNum == findVendTrans.AccountNum;

        //SpecTransManager specTransManager = SpecTransManager::newRefTableId(vendTable, tablenum(VendSettlement), true);
        //specTransManager.insert(vendSettlement.DataAreaId, vendSettlement.TableId, vendSettlement.RecId, vendSettlement.SettleAmountCur, findVendTrans.CurrencyCode);

        //CustVendSettlement custVendSettlement;

        //custVendSettlement = CustVendSettlement::findByModule(ModuleCustVend::Vend, vendSettlement.RecId);

        //CustVendSettlementInterface intf = custVendSettlement.custVendSettlementInterface();

        //intf.markThisAndRelatedOffsets(specTransManager, findVendTrans.CurrencyCode);

        //if (VendTrans::reverseTransactExtAux(vendTable, null, settleDatePrinc::DateOfPayment, vendSettlement.TransDate))
        //{
        //    specTransManager.deleteAll();
        //}

        VendSettlement vendSettlement;
        VendSettlement vendSettlementSecond;

        SpecTransManager specTransManager = SpecTransManager::newRefTableId(vendTable, tablenum(VendSettlement), true);

        select firstonly vendSettlement
            where vendSettlement.TransCompany == findVendTrans.dataAreaId
                && vendSettlement.TransRecId == findVendTrans.RecId
                && vendSettlement.AccountNum == findVendTrans.AccountNum;
        
        if (!specTransManager.exist(vendSettlement.DataAreaId, vendSettlement.TableId, vendSettlement.RecId))
        {
            specTransManager.insert(vendSettlement.DataAreaId, vendSettlement.TableId, vendSettlement.RecId, vendSettlement.SettleAmountCur, findVendTrans.CurrencyCode);

            CustVendTrans custVendTrans = vendSettlement.custVendSettlementInterface().custVendTrans();
            vendSettlement.CustVendSettlement::markRelatedTaxWithholdVoucherByLine(
                    specTransManager,
                    custVendTrans.Voucher,
                    custVendTrans.TransDate,
                    vendSettlement.OffsetTransVoucher);
        }

        select firstonly vendSettlementSecond
            where vendSettlementSecond.TransCompany == findVendTrans.dataAreaId
                && vendSettlementSecond.OffsetRecid == findVendTrans.RecId
                && vendSettlementSecond.AccountNum == findVendTrans.AccountNum
                && vendSettlementSecond.SettleAmountMST == - vendSettlement.SettleAmountMST;

        if (vendSettlementSecond.RecId == 0)
        {
            return;
        }
        
        if (!specTransManager.exist(vendSettlementSecond.DataAreaId, vendSettlementSecond.TableId, vendSettlementSecond.RecId))
        {
            specTransManager.insert(vendSettlementSecond.DataAreaId, vendSettlementSecond.TableId, vendSettlementSecond.RecId, vendSettlementSecond.SettleAmountCur, findVendTrans.CurrencyCode);

            CustVendTrans custVendTrans = vendSettlementSecond.custVendSettlementInterface().custVendTrans();
            vendSettlementSecond.CustVendSettlement::markRelatedTaxWithholdVoucherByLine(
                    specTransManager,
                    custVendTrans.Voucher,
                    custVendTrans.TransDate,
                    vendSettlementSecond.OffsetTransVoucher);
        }

        if (VendTrans::reverseTransactExtAux(vendTable, null, settleDatePrinc::DateOfPayment, vendSettlement.TransDate))
        {
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UnsettleByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unsettle transactions by voucher.
    /// </summary>
    /// <param name = "_voucher">Voucher.</param>
    public static void UnsettleByVoucher(Voucher _voucher)
    {
        SettleExtAux::UnsettleCustByVoucher(_voucher);
        SettleExtAux::UnsettleVendByVoucher(_voucher);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>